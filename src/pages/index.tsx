import { Button, TextField } from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers";
import { Dayjs } from "dayjs";
import { motion } from "framer-motion";
import Head from "next/head";
import { useState } from "react";
import LandingVideo from "~/components/LandingVideo";
import LoadingSpinner from "~/components/LoadingSpinner";
import CompanySelect from "~/components/SelectCompany";
import { api } from "~/utils/api";

export default function Home() {
  const [company, setCompany] = useState<string | null>();
  const [amount, setAmount] = useState<number>();
  const [buyDate, setBuyDate] = useState<Dayjs | null>();
  const [sellDate, setSellDate] = useState<Dayjs | null>();
  const [errorText, setErrorText] = useState<string>();

  const calculateMutation = api.calculate.useMutation();

  function calculate() {
    if (!company) {
      setErrorText("Please choose a company.");
      return;
    }

    if (!amount) {
      setErrorText("Please enter amount.");
      return;
    }

    if (!buyDate) {
      setErrorText("Please enter buy date.");
      return;
    }

    if (!sellDate) {
      setErrorText("Please enter sell date.");
      return;
    }

    if (buyDate.isAfter(sellDate)) {
      setErrorText("Invalid dates");
      return;
    }

    setErrorText(undefined);

    calculateMutation.mutate({
      company,
      amount,
      buyDate: buyDate.toISOString().split("T")[0]!,
      sellDate: sellDate.toISOString().split("T")[0]!,
    });
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Head>
        <title>Cap App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="text-text-primary flex flex-grow flex-col items-center">
        <LandingVideo />
        <div className="flex flex-grow flex-col ">
          <div className="flex flex-grow flex-col items-center">
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{
                ease: "easeInOut",
                duration: 0.9,
                delay: 0.3,
              }}
            >
              <div className="flex flex-grow flex-col items-center p-4">
                <div className="text-3xl sm:text-6xl">Cap App</div>
                <div className="mb-7 mt-4 w-full max-w-[650px] text-center text-sm">
                  Use the Cap App calculator to determine the potential profit
                  resulting from capital appreciation by purchasing stock shares
                  of a specific S&P 500 index company on date A and selling them
                  on date B, based on a certain amount of initial investment.
                </div>
                <div className="flex w-full max-w-[600px] flex-col items-center space-y-4">
                  <div className="w-full">
                    <CompanySelect
                      onChange={(value) => setCompany(value?.code)}
                    />
                  </div>
                  <div className="flex w-full flex-col items-stretch space-y-4 md:flex-row md:items-center md:space-x-4 md:space-y-0">
                    <TextField
                      variant="outlined"
                      label="Investment (USD)"
                      name="Amount"
                      type="number"
                      InputProps={{ inputProps: { min: 0 } }}
                      onChange={(e) => setAmount(parseInt(e.target.value))}
                    />
                    <DatePicker
                      label="Buy date"
                      onChange={(value) => setBuyDate(value as Dayjs | null)}
                      format="MMM DD YYYY"
                      timezone="UTC"
                    />
                    <DatePicker
                      label="Sell date"
                      onChange={(value) => setSellDate(value as Dayjs | null)}
                      format="MMM DD YYYY"
                      timezone="UTC"
                    />
                  </div>
                  {errorText && <div className="text-red-300">{errorText}</div>}
                  {calculateMutation.error && (
                    <div className="text-red-300">
                      {calculateMutation.error.message}
                    </div>
                  )}
                  {calculateMutation.isLoading ? (
                    <div className="pt-3">
                      <LoadingSpinner />
                    </div>
                  ) : (
                    <Button
                      variant="contained"
                      className="bg-primary-main"
                      onClick={calculate}
                    >
                      Calculate
                    </Button>
                  )}

                  {calculateMutation.data && (
                    <div className="pt-2 text-3xl">
                      {calculateMutation.data.profit >= 0 ? (
                        <div>
                          Profit: ${calculateMutation.data.profit.toFixed(2)}
                        </div>
                      ) : (
                        <div>
                          Loss: ${-calculateMutation.data.profit.toFixed(2)}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </div>

          <div className="p-2 text-center text-xs text-gray-400 sm:text-sm">
            Copyright © 2023{" "}
            <a className="hover:underline" href="https://google.com">
              Luka Matić - Mahadeva Tech
            </a>
            <div>All Rights Reserved</div>
          </div>
        </div>
      </main>
    </div>
  );
}
